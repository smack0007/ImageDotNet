/// <auto-generated />
using Xunit;

namespace ImageDotNet.Tests
{
    public partial class TgaTests
    {
        [Fact]
        public void SaveAndLoad_Bgr24_1x1()
        {
            AssertSaveAndLoad(new Image<Bgr24>(1, 1, TestData.Bgr24Images.Image1x1));
        }

        [Fact]
        public void SaveAndLoad_Bgr24_2x2()
        {
            AssertSaveAndLoad(new Image<Bgr24>(2, 2, TestData.Bgr24Images.Image2x2));
        }

        [Fact]
        public void SaveAndLoad_Bgr24_3x3()
        {
            AssertSaveAndLoad(new Image<Bgr24>(3, 3, TestData.Bgr24Images.Image3x3));
        }

        [Fact]
        public void SaveAndLoad_Bgr24_4x4()
        {
            AssertSaveAndLoad(new Image<Bgr24>(4, 4, TestData.Bgr24Images.Image4x4));
        }

        [Fact]
        public void SaveAndLoad_Bgr24_5x5()
        {
            AssertSaveAndLoad(new Image<Bgr24>(5, 5, TestData.Bgr24Images.Image5x5));
        }

        [Fact]
        public void SaveAndLoad_Bgra32_1x1()
        {
            AssertSaveAndLoad(new Image<Bgra32>(1, 1, TestData.Bgra32Images.Image1x1));
        }

        [Fact]
        public void SaveAndLoad_Bgra32_2x2()
        {
            AssertSaveAndLoad(new Image<Bgra32>(2, 2, TestData.Bgra32Images.Image2x2));
        }

        [Fact]
        public void SaveAndLoad_Bgra32_3x3()
        {
            AssertSaveAndLoad(new Image<Bgra32>(3, 3, TestData.Bgra32Images.Image3x3));
        }

        [Fact]
        public void SaveAndLoad_Bgra32_4x4()
        {
            AssertSaveAndLoad(new Image<Bgra32>(4, 4, TestData.Bgra32Images.Image4x4));
        }

        [Fact]
        public void SaveAndLoad_Bgra32_5x5()
        {
            AssertSaveAndLoad(new Image<Bgra32>(5, 5, TestData.Bgra32Images.Image5x5));
        }

        [Fact]
        public void SaveAndLoad_Rgb24_1x1()
        {
            AssertSaveAndLoad(new Image<Rgb24>(1, 1, TestData.Rgb24Images.Image1x1));
        }

        [Fact]
        public void SaveAndLoad_Rgb24_2x2()
        {
            AssertSaveAndLoad(new Image<Rgb24>(2, 2, TestData.Rgb24Images.Image2x2));
        }

        [Fact]
        public void SaveAndLoad_Rgb24_3x3()
        {
            AssertSaveAndLoad(new Image<Rgb24>(3, 3, TestData.Rgb24Images.Image3x3));
        }

        [Fact]
        public void SaveAndLoad_Rgb24_4x4()
        {
            AssertSaveAndLoad(new Image<Rgb24>(4, 4, TestData.Rgb24Images.Image4x4));
        }

        [Fact]
        public void SaveAndLoad_Rgb24_5x5()
        {
            AssertSaveAndLoad(new Image<Rgb24>(5, 5, TestData.Rgb24Images.Image5x5));
        }

        [Fact]
        public void SaveAndLoad_Rgba32_1x1()
        {
            AssertSaveAndLoad(new Image<Rgba32>(1, 1, TestData.Rgba32Images.Image1x1));
        }

        [Fact]
        public void SaveAndLoad_Rgba32_2x2()
        {
            AssertSaveAndLoad(new Image<Rgba32>(2, 2, TestData.Rgba32Images.Image2x2));
        }

        [Fact]
        public void SaveAndLoad_Rgba32_3x3()
        {
            AssertSaveAndLoad(new Image<Rgba32>(3, 3, TestData.Rgba32Images.Image3x3));
        }

        [Fact]
        public void SaveAndLoad_Rgba32_4x4()
        {
            AssertSaveAndLoad(new Image<Rgba32>(4, 4, TestData.Rgba32Images.Image4x4));
        }

        [Fact]
        public void SaveAndLoad_Rgba32_5x5()
        {
            AssertSaveAndLoad(new Image<Rgba32>(5, 5, TestData.Rgba32Images.Image5x5));
        }
    }
}