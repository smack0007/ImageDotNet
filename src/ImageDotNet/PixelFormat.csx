using System;
using System.IO;
using System.Linq;
using System.Text;

var tab = "    ";

var pixelFormats = Directory.EnumerateFiles(Path.Combine(Path.GetDirectoryName(ProjectFilePath), "Pixels"))
    .Select(x => Path.GetFileNameWithoutExtension(x));

var pixelFormatEnum = new StringBuilder(1024);
foreach (var pixelFormat in pixelFormats)
{
    pixelFormatEnum.AppendLine($"{tab}{tab}{pixelFormat},");
}

var toPixelType = new StringBuilder(1024);
foreach (var pixelFormat in pixelFormats)
{
    toPixelType.AppendLine($"{tab}{tab}{tab}{tab}case PixelFormat.{pixelFormat}: return typeof({pixelFormat});");
}

var toPixelFormat = new StringBuilder(1024);
foreach (var pixelFormat in pixelFormats)
{
    toPixelFormat.AppendLine($"{tab}{tab}{tab}if (pixelType == typeof({pixelFormat})) return PixelFormat.{pixelFormat};");
}

Output.SetExtension("g.cs");
Output.WriteLine(
$@"/// <auto-generated />
using System;

namespace ImageDotNet
{{
    public enum PixelFormat
    {{
{pixelFormatEnum.ToString().TrimEnd()}
    }}

    public static partial class PixelHelper
    {{
        public static Type ToPixelType(this PixelFormat format)
        {{
            switch (format)
            {{
{toPixelType.ToString().TrimEnd()}
            }}

            throw new ImageDotNetException($""Unknown {{nameof(PixelFormat)}}."");
        }}

        public static PixelFormat ToPixelFormat<T>() where T: IPixel => ToPixelFormat(typeof(T));

        public static PixelFormat ToPixelFormat(Type pixelType)
        {{
{toPixelFormat.ToString().TrimEnd()}

            throw new ImageDotNetException($""Unknown {{nameof(PixelFormat)}}."");
        }}
    }}
}}");
